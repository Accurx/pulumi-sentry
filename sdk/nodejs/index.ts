// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;

export { GetIssueAlertArgs, GetIssueAlertResult, GetIssueAlertOutputArgs } from "./getIssueAlert";
export const getIssueAlert: typeof import("./getIssueAlert").getIssueAlert = null as any;
export const getIssueAlertOutput: typeof import("./getIssueAlert").getIssueAlertOutput = null as any;

export { GetKeyArgs, GetKeyResult, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;

export { GetMetricAlertArgs, GetMetricAlertResult, GetMetricAlertOutputArgs } from "./getMetricAlert";
export const getMetricAlert: typeof import("./getMetricAlert").getMetricAlert = null as any;
export const getMetricAlertOutput: typeof import("./getMetricAlert").getMetricAlertOutput = null as any;

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;

export { IssueAlertArgs, IssueAlertState } from "./issueAlert";
export type IssueAlert = import("./issueAlert").IssueAlert;
export const IssueAlert: typeof import("./issueAlert").IssueAlert = null as any;

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;

export { MetricAlertArgs, MetricAlertState } from "./metricAlert";
export type MetricAlert = import("./metricAlert").MetricAlert;
export const MetricAlert: typeof import("./metricAlert").MetricAlert = null as any;

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;

utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));
utilities.lazyLoad(exports, ["getIssueAlert","getIssueAlertOutput"], () => require("./getIssueAlert"));
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));
utilities.lazyLoad(exports, ["getMetricAlert","getMetricAlertOutput"], () => require("./getMetricAlert"));
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));
utilities.lazyLoad(exports, ["IssueAlert"], () => require("./issueAlert"));
utilities.lazyLoad(exports, ["Key"], () => require("./key"));
utilities.lazyLoad(exports, ["MetricAlert"], () => require("./metricAlert"));
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sentry:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "sentry:index/issueAlert:IssueAlert":
                return new IssueAlert(name, <any>undefined, { urn })
            case "sentry:index/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "sentry:index/metricAlert:MetricAlert":
                return new MetricAlert(name, <any>undefined, { urn })
            case "sentry:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "sentry:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "sentry:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "sentry:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "sentry:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sentry", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("sentry", "index/issueAlert", _module)
pulumi.runtime.registerResourceModule("sentry", "index/key", _module)
pulumi.runtime.registerResourceModule("sentry", "index/metricAlert", _module)
pulumi.runtime.registerResourceModule("sentry", "index/organization", _module)
pulumi.runtime.registerResourceModule("sentry", "index/plugin", _module)
pulumi.runtime.registerResourceModule("sentry", "index/project", _module)
pulumi.runtime.registerResourceModule("sentry", "index/rule", _module)
pulumi.runtime.registerResourceModule("sentry", "index/team", _module)
pulumi.runtime.registerResourcePackage("sentry", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sentry") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
