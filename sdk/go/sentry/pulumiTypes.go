// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DashboardWidget struct {
	DisplayType string                 `pulumi:"displayType"`
	Id          *string                `pulumi:"id"`
	Interval    *string                `pulumi:"interval"`
	Layout      DashboardWidgetLayout  `pulumi:"layout"`
	Limit       *int                   `pulumi:"limit"`
	Queries     []DashboardWidgetQuery `pulumi:"queries"`
	Title       string                 `pulumi:"title"`
	WidgetType  *string                `pulumi:"widgetType"`
}

// DashboardWidgetInput is an input type that accepts DashboardWidgetArgs and DashboardWidgetOutput values.
// You can construct a concrete instance of `DashboardWidgetInput` via:
//
//	DashboardWidgetArgs{...}
type DashboardWidgetInput interface {
	pulumi.Input

	ToDashboardWidgetOutput() DashboardWidgetOutput
	ToDashboardWidgetOutputWithContext(context.Context) DashboardWidgetOutput
}

type DashboardWidgetArgs struct {
	DisplayType pulumi.StringInput             `pulumi:"displayType"`
	Id          pulumi.StringPtrInput          `pulumi:"id"`
	Interval    pulumi.StringPtrInput          `pulumi:"interval"`
	Layout      DashboardWidgetLayoutInput     `pulumi:"layout"`
	Limit       pulumi.IntPtrInput             `pulumi:"limit"`
	Queries     DashboardWidgetQueryArrayInput `pulumi:"queries"`
	Title       pulumi.StringInput             `pulumi:"title"`
	WidgetType  pulumi.StringPtrInput          `pulumi:"widgetType"`
}

func (DashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return i.ToDashboardWidgetOutputWithContext(context.Background())
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetOutput)
}

// DashboardWidgetArrayInput is an input type that accepts DashboardWidgetArray and DashboardWidgetArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetArrayInput` via:
//
//	DashboardWidgetArray{ DashboardWidgetArgs{...} }
type DashboardWidgetArrayInput interface {
	pulumi.Input

	ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput
	ToDashboardWidgetArrayOutputWithContext(context.Context) DashboardWidgetArrayOutput
}

type DashboardWidgetArray []DashboardWidgetInput

func (DashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return i.ToDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetArrayOutput)
}

type DashboardWidgetOutput struct{ *pulumi.OutputState }

func (DashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) DisplayType() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.DisplayType }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) Layout() DashboardWidgetLayoutOutput {
	return o.ApplyT(func(v DashboardWidget) DashboardWidgetLayout { return v.Layout }).(DashboardWidgetLayoutOutput)
}

func (o DashboardWidgetOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o DashboardWidgetOutput) Queries() DashboardWidgetQueryArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetQuery { return v.Queries }).(DashboardWidgetQueryArrayOutput)
}

func (o DashboardWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Title }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) WidgetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.WidgetType }).(pulumi.StringPtrOutput)
}

type DashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) Index(i pulumi.IntInput) DashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidget {
		return vs[0].([]DashboardWidget)[vs[1].(int)]
	}).(DashboardWidgetOutput)
}

type DashboardWidgetLayout struct {
	H    int `pulumi:"h"`
	MinH int `pulumi:"minH"`
	W    int `pulumi:"w"`
	X    int `pulumi:"x"`
	Y    int `pulumi:"y"`
}

// DashboardWidgetLayoutInput is an input type that accepts DashboardWidgetLayoutArgs and DashboardWidgetLayoutOutput values.
// You can construct a concrete instance of `DashboardWidgetLayoutInput` via:
//
//	DashboardWidgetLayoutArgs{...}
type DashboardWidgetLayoutInput interface {
	pulumi.Input

	ToDashboardWidgetLayoutOutput() DashboardWidgetLayoutOutput
	ToDashboardWidgetLayoutOutputWithContext(context.Context) DashboardWidgetLayoutOutput
}

type DashboardWidgetLayoutArgs struct {
	H    pulumi.IntInput `pulumi:"h"`
	MinH pulumi.IntInput `pulumi:"minH"`
	W    pulumi.IntInput `pulumi:"w"`
	X    pulumi.IntInput `pulumi:"x"`
	Y    pulumi.IntInput `pulumi:"y"`
}

func (DashboardWidgetLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetLayout)(nil)).Elem()
}

func (i DashboardWidgetLayoutArgs) ToDashboardWidgetLayoutOutput() DashboardWidgetLayoutOutput {
	return i.ToDashboardWidgetLayoutOutputWithContext(context.Background())
}

func (i DashboardWidgetLayoutArgs) ToDashboardWidgetLayoutOutputWithContext(ctx context.Context) DashboardWidgetLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetLayoutOutput)
}

type DashboardWidgetLayoutOutput struct{ *pulumi.OutputState }

func (DashboardWidgetLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetLayout)(nil)).Elem()
}

func (o DashboardWidgetLayoutOutput) ToDashboardWidgetLayoutOutput() DashboardWidgetLayoutOutput {
	return o
}

func (o DashboardWidgetLayoutOutput) ToDashboardWidgetLayoutOutputWithContext(ctx context.Context) DashboardWidgetLayoutOutput {
	return o
}

func (o DashboardWidgetLayoutOutput) H() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidgetLayout) int { return v.H }).(pulumi.IntOutput)
}

func (o DashboardWidgetLayoutOutput) MinH() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidgetLayout) int { return v.MinH }).(pulumi.IntOutput)
}

func (o DashboardWidgetLayoutOutput) W() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidgetLayout) int { return v.W }).(pulumi.IntOutput)
}

func (o DashboardWidgetLayoutOutput) X() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidgetLayout) int { return v.X }).(pulumi.IntOutput)
}

func (o DashboardWidgetLayoutOutput) Y() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidgetLayout) int { return v.Y }).(pulumi.IntOutput)
}

type DashboardWidgetQuery struct {
	Aggregates   []string `pulumi:"aggregates"`
	Columns      []string `pulumi:"columns"`
	Conditions   *string  `pulumi:"conditions"`
	FieldAliases []string `pulumi:"fieldAliases"`
	Fields       []string `pulumi:"fields"`
	Id           *string  `pulumi:"id"`
	Name         *string  `pulumi:"name"`
	OrderBy      *string  `pulumi:"orderBy"`
}

// DashboardWidgetQueryInput is an input type that accepts DashboardWidgetQueryArgs and DashboardWidgetQueryOutput values.
// You can construct a concrete instance of `DashboardWidgetQueryInput` via:
//
//	DashboardWidgetQueryArgs{...}
type DashboardWidgetQueryInput interface {
	pulumi.Input

	ToDashboardWidgetQueryOutput() DashboardWidgetQueryOutput
	ToDashboardWidgetQueryOutputWithContext(context.Context) DashboardWidgetQueryOutput
}

type DashboardWidgetQueryArgs struct {
	Aggregates   pulumi.StringArrayInput `pulumi:"aggregates"`
	Columns      pulumi.StringArrayInput `pulumi:"columns"`
	Conditions   pulumi.StringPtrInput   `pulumi:"conditions"`
	FieldAliases pulumi.StringArrayInput `pulumi:"fieldAliases"`
	Fields       pulumi.StringArrayInput `pulumi:"fields"`
	Id           pulumi.StringPtrInput   `pulumi:"id"`
	Name         pulumi.StringPtrInput   `pulumi:"name"`
	OrderBy      pulumi.StringPtrInput   `pulumi:"orderBy"`
}

func (DashboardWidgetQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetQuery)(nil)).Elem()
}

func (i DashboardWidgetQueryArgs) ToDashboardWidgetQueryOutput() DashboardWidgetQueryOutput {
	return i.ToDashboardWidgetQueryOutputWithContext(context.Background())
}

func (i DashboardWidgetQueryArgs) ToDashboardWidgetQueryOutputWithContext(ctx context.Context) DashboardWidgetQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetQueryOutput)
}

// DashboardWidgetQueryArrayInput is an input type that accepts DashboardWidgetQueryArray and DashboardWidgetQueryArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetQueryArrayInput` via:
//
//	DashboardWidgetQueryArray{ DashboardWidgetQueryArgs{...} }
type DashboardWidgetQueryArrayInput interface {
	pulumi.Input

	ToDashboardWidgetQueryArrayOutput() DashboardWidgetQueryArrayOutput
	ToDashboardWidgetQueryArrayOutputWithContext(context.Context) DashboardWidgetQueryArrayOutput
}

type DashboardWidgetQueryArray []DashboardWidgetQueryInput

func (DashboardWidgetQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetQuery)(nil)).Elem()
}

func (i DashboardWidgetQueryArray) ToDashboardWidgetQueryArrayOutput() DashboardWidgetQueryArrayOutput {
	return i.ToDashboardWidgetQueryArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetQueryArray) ToDashboardWidgetQueryArrayOutputWithContext(ctx context.Context) DashboardWidgetQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetQueryArrayOutput)
}

type DashboardWidgetQueryOutput struct{ *pulumi.OutputState }

func (DashboardWidgetQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetQuery)(nil)).Elem()
}

func (o DashboardWidgetQueryOutput) ToDashboardWidgetQueryOutput() DashboardWidgetQueryOutput {
	return o
}

func (o DashboardWidgetQueryOutput) ToDashboardWidgetQueryOutputWithContext(ctx context.Context) DashboardWidgetQueryOutput {
	return o
}

func (o DashboardWidgetQueryOutput) Aggregates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) []string { return v.Aggregates }).(pulumi.StringArrayOutput)
}

func (o DashboardWidgetQueryOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o DashboardWidgetQueryOutput) Conditions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) *string { return v.Conditions }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetQueryOutput) FieldAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) []string { return v.FieldAliases }).(pulumi.StringArrayOutput)
}

func (o DashboardWidgetQueryOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o DashboardWidgetQueryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetQueryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetQueryOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetQuery) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

type DashboardWidgetQueryArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetQuery)(nil)).Elem()
}

func (o DashboardWidgetQueryArrayOutput) ToDashboardWidgetQueryArrayOutput() DashboardWidgetQueryArrayOutput {
	return o
}

func (o DashboardWidgetQueryArrayOutput) ToDashboardWidgetQueryArrayOutputWithContext(ctx context.Context) DashboardWidgetQueryArrayOutput {
	return o
}

func (o DashboardWidgetQueryArrayOutput) Index(i pulumi.IntInput) DashboardWidgetQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetQuery {
		return vs[0].([]DashboardWidgetQuery)[vs[1].(int)]
	}).(DashboardWidgetQueryOutput)
}

type MetricAlertTrigger struct {
	Actions          []MetricAlertTriggerAction `pulumi:"actions"`
	AlertThreshold   float64                    `pulumi:"alertThreshold"`
	Id               *string                    `pulumi:"id"`
	Label            string                     `pulumi:"label"`
	ResolveThreshold *float64                   `pulumi:"resolveThreshold"`
	ThresholdType    int                        `pulumi:"thresholdType"`
}

// MetricAlertTriggerInput is an input type that accepts MetricAlertTriggerArgs and MetricAlertTriggerOutput values.
// You can construct a concrete instance of `MetricAlertTriggerInput` via:
//
//	MetricAlertTriggerArgs{...}
type MetricAlertTriggerInput interface {
	pulumi.Input

	ToMetricAlertTriggerOutput() MetricAlertTriggerOutput
	ToMetricAlertTriggerOutputWithContext(context.Context) MetricAlertTriggerOutput
}

type MetricAlertTriggerArgs struct {
	Actions          MetricAlertTriggerActionArrayInput `pulumi:"actions"`
	AlertThreshold   pulumi.Float64Input                `pulumi:"alertThreshold"`
	Id               pulumi.StringPtrInput              `pulumi:"id"`
	Label            pulumi.StringInput                 `pulumi:"label"`
	ResolveThreshold pulumi.Float64PtrInput             `pulumi:"resolveThreshold"`
	ThresholdType    pulumi.IntInput                    `pulumi:"thresholdType"`
}

func (MetricAlertTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertTrigger)(nil)).Elem()
}

func (i MetricAlertTriggerArgs) ToMetricAlertTriggerOutput() MetricAlertTriggerOutput {
	return i.ToMetricAlertTriggerOutputWithContext(context.Background())
}

func (i MetricAlertTriggerArgs) ToMetricAlertTriggerOutputWithContext(ctx context.Context) MetricAlertTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertTriggerOutput)
}

// MetricAlertTriggerArrayInput is an input type that accepts MetricAlertTriggerArray and MetricAlertTriggerArrayOutput values.
// You can construct a concrete instance of `MetricAlertTriggerArrayInput` via:
//
//	MetricAlertTriggerArray{ MetricAlertTriggerArgs{...} }
type MetricAlertTriggerArrayInput interface {
	pulumi.Input

	ToMetricAlertTriggerArrayOutput() MetricAlertTriggerArrayOutput
	ToMetricAlertTriggerArrayOutputWithContext(context.Context) MetricAlertTriggerArrayOutput
}

type MetricAlertTriggerArray []MetricAlertTriggerInput

func (MetricAlertTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertTrigger)(nil)).Elem()
}

func (i MetricAlertTriggerArray) ToMetricAlertTriggerArrayOutput() MetricAlertTriggerArrayOutput {
	return i.ToMetricAlertTriggerArrayOutputWithContext(context.Background())
}

func (i MetricAlertTriggerArray) ToMetricAlertTriggerArrayOutputWithContext(ctx context.Context) MetricAlertTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertTriggerArrayOutput)
}

type MetricAlertTriggerOutput struct{ *pulumi.OutputState }

func (MetricAlertTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertTrigger)(nil)).Elem()
}

func (o MetricAlertTriggerOutput) ToMetricAlertTriggerOutput() MetricAlertTriggerOutput {
	return o
}

func (o MetricAlertTriggerOutput) ToMetricAlertTriggerOutputWithContext(ctx context.Context) MetricAlertTriggerOutput {
	return o
}

func (o MetricAlertTriggerOutput) Actions() MetricAlertTriggerActionArrayOutput {
	return o.ApplyT(func(v MetricAlertTrigger) []MetricAlertTriggerAction { return v.Actions }).(MetricAlertTriggerActionArrayOutput)
}

func (o MetricAlertTriggerOutput) AlertThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricAlertTrigger) float64 { return v.AlertThreshold }).(pulumi.Float64Output)
}

func (o MetricAlertTriggerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertTrigger) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o MetricAlertTriggerOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertTrigger) string { return v.Label }).(pulumi.StringOutput)
}

func (o MetricAlertTriggerOutput) ResolveThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricAlertTrigger) *float64 { return v.ResolveThreshold }).(pulumi.Float64PtrOutput)
}

func (o MetricAlertTriggerOutput) ThresholdType() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlertTrigger) int { return v.ThresholdType }).(pulumi.IntOutput)
}

type MetricAlertTriggerArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertTrigger)(nil)).Elem()
}

func (o MetricAlertTriggerArrayOutput) ToMetricAlertTriggerArrayOutput() MetricAlertTriggerArrayOutput {
	return o
}

func (o MetricAlertTriggerArrayOutput) ToMetricAlertTriggerArrayOutputWithContext(ctx context.Context) MetricAlertTriggerArrayOutput {
	return o
}

func (o MetricAlertTriggerArrayOutput) Index(i pulumi.IntInput) MetricAlertTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertTrigger {
		return vs[0].([]MetricAlertTrigger)[vs[1].(int)]
	}).(MetricAlertTriggerOutput)
}

type MetricAlertTriggerAction struct {
	Id               *string `pulumi:"id"`
	TargetIdentifier string  `pulumi:"targetIdentifier"`
	TargetType       string  `pulumi:"targetType"`
	Type             string  `pulumi:"type"`
}

// MetricAlertTriggerActionInput is an input type that accepts MetricAlertTriggerActionArgs and MetricAlertTriggerActionOutput values.
// You can construct a concrete instance of `MetricAlertTriggerActionInput` via:
//
//	MetricAlertTriggerActionArgs{...}
type MetricAlertTriggerActionInput interface {
	pulumi.Input

	ToMetricAlertTriggerActionOutput() MetricAlertTriggerActionOutput
	ToMetricAlertTriggerActionOutputWithContext(context.Context) MetricAlertTriggerActionOutput
}

type MetricAlertTriggerActionArgs struct {
	Id               pulumi.StringPtrInput `pulumi:"id"`
	TargetIdentifier pulumi.StringInput    `pulumi:"targetIdentifier"`
	TargetType       pulumi.StringInput    `pulumi:"targetType"`
	Type             pulumi.StringInput    `pulumi:"type"`
}

func (MetricAlertTriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertTriggerAction)(nil)).Elem()
}

func (i MetricAlertTriggerActionArgs) ToMetricAlertTriggerActionOutput() MetricAlertTriggerActionOutput {
	return i.ToMetricAlertTriggerActionOutputWithContext(context.Background())
}

func (i MetricAlertTriggerActionArgs) ToMetricAlertTriggerActionOutputWithContext(ctx context.Context) MetricAlertTriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertTriggerActionOutput)
}

// MetricAlertTriggerActionArrayInput is an input type that accepts MetricAlertTriggerActionArray and MetricAlertTriggerActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertTriggerActionArrayInput` via:
//
//	MetricAlertTriggerActionArray{ MetricAlertTriggerActionArgs{...} }
type MetricAlertTriggerActionArrayInput interface {
	pulumi.Input

	ToMetricAlertTriggerActionArrayOutput() MetricAlertTriggerActionArrayOutput
	ToMetricAlertTriggerActionArrayOutputWithContext(context.Context) MetricAlertTriggerActionArrayOutput
}

type MetricAlertTriggerActionArray []MetricAlertTriggerActionInput

func (MetricAlertTriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertTriggerAction)(nil)).Elem()
}

func (i MetricAlertTriggerActionArray) ToMetricAlertTriggerActionArrayOutput() MetricAlertTriggerActionArrayOutput {
	return i.ToMetricAlertTriggerActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertTriggerActionArray) ToMetricAlertTriggerActionArrayOutputWithContext(ctx context.Context) MetricAlertTriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertTriggerActionArrayOutput)
}

type MetricAlertTriggerActionOutput struct{ *pulumi.OutputState }

func (MetricAlertTriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertTriggerAction)(nil)).Elem()
}

func (o MetricAlertTriggerActionOutput) ToMetricAlertTriggerActionOutput() MetricAlertTriggerActionOutput {
	return o
}

func (o MetricAlertTriggerActionOutput) ToMetricAlertTriggerActionOutputWithContext(ctx context.Context) MetricAlertTriggerActionOutput {
	return o
}

func (o MetricAlertTriggerActionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertTriggerAction) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o MetricAlertTriggerActionOutput) TargetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertTriggerAction) string { return v.TargetIdentifier }).(pulumi.StringOutput)
}

func (o MetricAlertTriggerActionOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertTriggerAction) string { return v.TargetType }).(pulumi.StringOutput)
}

func (o MetricAlertTriggerActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertTriggerAction) string { return v.Type }).(pulumi.StringOutput)
}

type MetricAlertTriggerActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertTriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertTriggerAction)(nil)).Elem()
}

func (o MetricAlertTriggerActionArrayOutput) ToMetricAlertTriggerActionArrayOutput() MetricAlertTriggerActionArrayOutput {
	return o
}

func (o MetricAlertTriggerActionArrayOutput) ToMetricAlertTriggerActionArrayOutputWithContext(ctx context.Context) MetricAlertTriggerActionArrayOutput {
	return o
}

func (o MetricAlertTriggerActionArrayOutput) Index(i pulumi.IntInput) MetricAlertTriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertTriggerAction {
		return vs[0].([]MetricAlertTriggerAction)[vs[1].(int)]
	}).(MetricAlertTriggerActionOutput)
}

type GetDashboardWidget struct {
	DisplayType string                     `pulumi:"displayType"`
	Id          string                     `pulumi:"id"`
	Interval    string                     `pulumi:"interval"`
	Layouts     []GetDashboardWidgetLayout `pulumi:"layouts"`
	Limit       int                        `pulumi:"limit"`
	Queries     []GetDashboardWidgetQuery  `pulumi:"queries"`
	Title       string                     `pulumi:"title"`
	WidgetType  string                     `pulumi:"widgetType"`
}

// GetDashboardWidgetInput is an input type that accepts GetDashboardWidgetArgs and GetDashboardWidgetOutput values.
// You can construct a concrete instance of `GetDashboardWidgetInput` via:
//
//	GetDashboardWidgetArgs{...}
type GetDashboardWidgetInput interface {
	pulumi.Input

	ToGetDashboardWidgetOutput() GetDashboardWidgetOutput
	ToGetDashboardWidgetOutputWithContext(context.Context) GetDashboardWidgetOutput
}

type GetDashboardWidgetArgs struct {
	DisplayType pulumi.StringInput                 `pulumi:"displayType"`
	Id          pulumi.StringInput                 `pulumi:"id"`
	Interval    pulumi.StringInput                 `pulumi:"interval"`
	Layouts     GetDashboardWidgetLayoutArrayInput `pulumi:"layouts"`
	Limit       pulumi.IntInput                    `pulumi:"limit"`
	Queries     GetDashboardWidgetQueryArrayInput  `pulumi:"queries"`
	Title       pulumi.StringInput                 `pulumi:"title"`
	WidgetType  pulumi.StringInput                 `pulumi:"widgetType"`
}

func (GetDashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidget)(nil)).Elem()
}

func (i GetDashboardWidgetArgs) ToGetDashboardWidgetOutput() GetDashboardWidgetOutput {
	return i.ToGetDashboardWidgetOutputWithContext(context.Background())
}

func (i GetDashboardWidgetArgs) ToGetDashboardWidgetOutputWithContext(ctx context.Context) GetDashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetOutput)
}

// GetDashboardWidgetArrayInput is an input type that accepts GetDashboardWidgetArray and GetDashboardWidgetArrayOutput values.
// You can construct a concrete instance of `GetDashboardWidgetArrayInput` via:
//
//	GetDashboardWidgetArray{ GetDashboardWidgetArgs{...} }
type GetDashboardWidgetArrayInput interface {
	pulumi.Input

	ToGetDashboardWidgetArrayOutput() GetDashboardWidgetArrayOutput
	ToGetDashboardWidgetArrayOutputWithContext(context.Context) GetDashboardWidgetArrayOutput
}

type GetDashboardWidgetArray []GetDashboardWidgetInput

func (GetDashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidget)(nil)).Elem()
}

func (i GetDashboardWidgetArray) ToGetDashboardWidgetArrayOutput() GetDashboardWidgetArrayOutput {
	return i.ToGetDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i GetDashboardWidgetArray) ToGetDashboardWidgetArrayOutputWithContext(ctx context.Context) GetDashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetArrayOutput)
}

type GetDashboardWidgetOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidget)(nil)).Elem()
}

func (o GetDashboardWidgetOutput) ToGetDashboardWidgetOutput() GetDashboardWidgetOutput {
	return o
}

func (o GetDashboardWidgetOutput) ToGetDashboardWidgetOutputWithContext(ctx context.Context) GetDashboardWidgetOutput {
	return o
}

func (o GetDashboardWidgetOutput) DisplayType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidget) string { return v.DisplayType }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidget) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidget) string { return v.Interval }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetOutput) Layouts() GetDashboardWidgetLayoutArrayOutput {
	return o.ApplyT(func(v GetDashboardWidget) []GetDashboardWidgetLayout { return v.Layouts }).(GetDashboardWidgetLayoutArrayOutput)
}

func (o GetDashboardWidgetOutput) Limit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidget) int { return v.Limit }).(pulumi.IntOutput)
}

func (o GetDashboardWidgetOutput) Queries() GetDashboardWidgetQueryArrayOutput {
	return o.ApplyT(func(v GetDashboardWidget) []GetDashboardWidgetQuery { return v.Queries }).(GetDashboardWidgetQueryArrayOutput)
}

func (o GetDashboardWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidget) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetOutput) WidgetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidget) string { return v.WidgetType }).(pulumi.StringOutput)
}

type GetDashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidget)(nil)).Elem()
}

func (o GetDashboardWidgetArrayOutput) ToGetDashboardWidgetArrayOutput() GetDashboardWidgetArrayOutput {
	return o
}

func (o GetDashboardWidgetArrayOutput) ToGetDashboardWidgetArrayOutputWithContext(ctx context.Context) GetDashboardWidgetArrayOutput {
	return o
}

func (o GetDashboardWidgetArrayOutput) Index(i pulumi.IntInput) GetDashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardWidget {
		return vs[0].([]GetDashboardWidget)[vs[1].(int)]
	}).(GetDashboardWidgetOutput)
}

type GetDashboardWidgetLayout struct {
	H    int `pulumi:"h"`
	MinH int `pulumi:"minH"`
	W    int `pulumi:"w"`
	X    int `pulumi:"x"`
	Y    int `pulumi:"y"`
}

// GetDashboardWidgetLayoutInput is an input type that accepts GetDashboardWidgetLayoutArgs and GetDashboardWidgetLayoutOutput values.
// You can construct a concrete instance of `GetDashboardWidgetLayoutInput` via:
//
//	GetDashboardWidgetLayoutArgs{...}
type GetDashboardWidgetLayoutInput interface {
	pulumi.Input

	ToGetDashboardWidgetLayoutOutput() GetDashboardWidgetLayoutOutput
	ToGetDashboardWidgetLayoutOutputWithContext(context.Context) GetDashboardWidgetLayoutOutput
}

type GetDashboardWidgetLayoutArgs struct {
	H    pulumi.IntInput `pulumi:"h"`
	MinH pulumi.IntInput `pulumi:"minH"`
	W    pulumi.IntInput `pulumi:"w"`
	X    pulumi.IntInput `pulumi:"x"`
	Y    pulumi.IntInput `pulumi:"y"`
}

func (GetDashboardWidgetLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidgetLayout)(nil)).Elem()
}

func (i GetDashboardWidgetLayoutArgs) ToGetDashboardWidgetLayoutOutput() GetDashboardWidgetLayoutOutput {
	return i.ToGetDashboardWidgetLayoutOutputWithContext(context.Background())
}

func (i GetDashboardWidgetLayoutArgs) ToGetDashboardWidgetLayoutOutputWithContext(ctx context.Context) GetDashboardWidgetLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetLayoutOutput)
}

// GetDashboardWidgetLayoutArrayInput is an input type that accepts GetDashboardWidgetLayoutArray and GetDashboardWidgetLayoutArrayOutput values.
// You can construct a concrete instance of `GetDashboardWidgetLayoutArrayInput` via:
//
//	GetDashboardWidgetLayoutArray{ GetDashboardWidgetLayoutArgs{...} }
type GetDashboardWidgetLayoutArrayInput interface {
	pulumi.Input

	ToGetDashboardWidgetLayoutArrayOutput() GetDashboardWidgetLayoutArrayOutput
	ToGetDashboardWidgetLayoutArrayOutputWithContext(context.Context) GetDashboardWidgetLayoutArrayOutput
}

type GetDashboardWidgetLayoutArray []GetDashboardWidgetLayoutInput

func (GetDashboardWidgetLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidgetLayout)(nil)).Elem()
}

func (i GetDashboardWidgetLayoutArray) ToGetDashboardWidgetLayoutArrayOutput() GetDashboardWidgetLayoutArrayOutput {
	return i.ToGetDashboardWidgetLayoutArrayOutputWithContext(context.Background())
}

func (i GetDashboardWidgetLayoutArray) ToGetDashboardWidgetLayoutArrayOutputWithContext(ctx context.Context) GetDashboardWidgetLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetLayoutArrayOutput)
}

type GetDashboardWidgetLayoutOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidgetLayout)(nil)).Elem()
}

func (o GetDashboardWidgetLayoutOutput) ToGetDashboardWidgetLayoutOutput() GetDashboardWidgetLayoutOutput {
	return o
}

func (o GetDashboardWidgetLayoutOutput) ToGetDashboardWidgetLayoutOutputWithContext(ctx context.Context) GetDashboardWidgetLayoutOutput {
	return o
}

func (o GetDashboardWidgetLayoutOutput) H() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidgetLayout) int { return v.H }).(pulumi.IntOutput)
}

func (o GetDashboardWidgetLayoutOutput) MinH() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidgetLayout) int { return v.MinH }).(pulumi.IntOutput)
}

func (o GetDashboardWidgetLayoutOutput) W() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidgetLayout) int { return v.W }).(pulumi.IntOutput)
}

func (o GetDashboardWidgetLayoutOutput) X() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidgetLayout) int { return v.X }).(pulumi.IntOutput)
}

func (o GetDashboardWidgetLayoutOutput) Y() pulumi.IntOutput {
	return o.ApplyT(func(v GetDashboardWidgetLayout) int { return v.Y }).(pulumi.IntOutput)
}

type GetDashboardWidgetLayoutArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidgetLayout)(nil)).Elem()
}

func (o GetDashboardWidgetLayoutArrayOutput) ToGetDashboardWidgetLayoutArrayOutput() GetDashboardWidgetLayoutArrayOutput {
	return o
}

func (o GetDashboardWidgetLayoutArrayOutput) ToGetDashboardWidgetLayoutArrayOutputWithContext(ctx context.Context) GetDashboardWidgetLayoutArrayOutput {
	return o
}

func (o GetDashboardWidgetLayoutArrayOutput) Index(i pulumi.IntInput) GetDashboardWidgetLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardWidgetLayout {
		return vs[0].([]GetDashboardWidgetLayout)[vs[1].(int)]
	}).(GetDashboardWidgetLayoutOutput)
}

type GetDashboardWidgetQuery struct {
	Aggregates   []string `pulumi:"aggregates"`
	Columns      []string `pulumi:"columns"`
	Conditions   string   `pulumi:"conditions"`
	FieldAliases []string `pulumi:"fieldAliases"`
	Fields       []string `pulumi:"fields"`
	Id           string   `pulumi:"id"`
	Name         string   `pulumi:"name"`
	OrderBy      string   `pulumi:"orderBy"`
}

// GetDashboardWidgetQueryInput is an input type that accepts GetDashboardWidgetQueryArgs and GetDashboardWidgetQueryOutput values.
// You can construct a concrete instance of `GetDashboardWidgetQueryInput` via:
//
//	GetDashboardWidgetQueryArgs{...}
type GetDashboardWidgetQueryInput interface {
	pulumi.Input

	ToGetDashboardWidgetQueryOutput() GetDashboardWidgetQueryOutput
	ToGetDashboardWidgetQueryOutputWithContext(context.Context) GetDashboardWidgetQueryOutput
}

type GetDashboardWidgetQueryArgs struct {
	Aggregates   pulumi.StringArrayInput `pulumi:"aggregates"`
	Columns      pulumi.StringArrayInput `pulumi:"columns"`
	Conditions   pulumi.StringInput      `pulumi:"conditions"`
	FieldAliases pulumi.StringArrayInput `pulumi:"fieldAliases"`
	Fields       pulumi.StringArrayInput `pulumi:"fields"`
	Id           pulumi.StringInput      `pulumi:"id"`
	Name         pulumi.StringInput      `pulumi:"name"`
	OrderBy      pulumi.StringInput      `pulumi:"orderBy"`
}

func (GetDashboardWidgetQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidgetQuery)(nil)).Elem()
}

func (i GetDashboardWidgetQueryArgs) ToGetDashboardWidgetQueryOutput() GetDashboardWidgetQueryOutput {
	return i.ToGetDashboardWidgetQueryOutputWithContext(context.Background())
}

func (i GetDashboardWidgetQueryArgs) ToGetDashboardWidgetQueryOutputWithContext(ctx context.Context) GetDashboardWidgetQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetQueryOutput)
}

// GetDashboardWidgetQueryArrayInput is an input type that accepts GetDashboardWidgetQueryArray and GetDashboardWidgetQueryArrayOutput values.
// You can construct a concrete instance of `GetDashboardWidgetQueryArrayInput` via:
//
//	GetDashboardWidgetQueryArray{ GetDashboardWidgetQueryArgs{...} }
type GetDashboardWidgetQueryArrayInput interface {
	pulumi.Input

	ToGetDashboardWidgetQueryArrayOutput() GetDashboardWidgetQueryArrayOutput
	ToGetDashboardWidgetQueryArrayOutputWithContext(context.Context) GetDashboardWidgetQueryArrayOutput
}

type GetDashboardWidgetQueryArray []GetDashboardWidgetQueryInput

func (GetDashboardWidgetQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidgetQuery)(nil)).Elem()
}

func (i GetDashboardWidgetQueryArray) ToGetDashboardWidgetQueryArrayOutput() GetDashboardWidgetQueryArrayOutput {
	return i.ToGetDashboardWidgetQueryArrayOutputWithContext(context.Background())
}

func (i GetDashboardWidgetQueryArray) ToGetDashboardWidgetQueryArrayOutputWithContext(ctx context.Context) GetDashboardWidgetQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardWidgetQueryArrayOutput)
}

type GetDashboardWidgetQueryOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardWidgetQuery)(nil)).Elem()
}

func (o GetDashboardWidgetQueryOutput) ToGetDashboardWidgetQueryOutput() GetDashboardWidgetQueryOutput {
	return o
}

func (o GetDashboardWidgetQueryOutput) ToGetDashboardWidgetQueryOutputWithContext(ctx context.Context) GetDashboardWidgetQueryOutput {
	return o
}

func (o GetDashboardWidgetQueryOutput) Aggregates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) []string { return v.Aggregates }).(pulumi.StringArrayOutput)
}

func (o GetDashboardWidgetQueryOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o GetDashboardWidgetQueryOutput) Conditions() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) string { return v.Conditions }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetQueryOutput) FieldAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) []string { return v.FieldAliases }).(pulumi.StringArrayOutput)
}

func (o GetDashboardWidgetQueryOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o GetDashboardWidgetQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetQueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDashboardWidgetQueryOutput) OrderBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardWidgetQuery) string { return v.OrderBy }).(pulumi.StringOutput)
}

type GetDashboardWidgetQueryArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardWidgetQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardWidgetQuery)(nil)).Elem()
}

func (o GetDashboardWidgetQueryArrayOutput) ToGetDashboardWidgetQueryArrayOutput() GetDashboardWidgetQueryArrayOutput {
	return o
}

func (o GetDashboardWidgetQueryArrayOutput) ToGetDashboardWidgetQueryArrayOutputWithContext(ctx context.Context) GetDashboardWidgetQueryArrayOutput {
	return o
}

func (o GetDashboardWidgetQueryArrayOutput) Index(i pulumi.IntInput) GetDashboardWidgetQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardWidgetQuery {
		return vs[0].([]GetDashboardWidgetQuery)[vs[1].(int)]
	}).(GetDashboardWidgetQueryOutput)
}

type GetMetricAlertTrigger struct {
	Actions          []GetMetricAlertTriggerAction `pulumi:"actions"`
	AlertThreshold   float64                       `pulumi:"alertThreshold"`
	Id               string                        `pulumi:"id"`
	Label            string                        `pulumi:"label"`
	ResolveThreshold float64                       `pulumi:"resolveThreshold"`
	ThresholdType    int                           `pulumi:"thresholdType"`
}

// GetMetricAlertTriggerInput is an input type that accepts GetMetricAlertTriggerArgs and GetMetricAlertTriggerOutput values.
// You can construct a concrete instance of `GetMetricAlertTriggerInput` via:
//
//	GetMetricAlertTriggerArgs{...}
type GetMetricAlertTriggerInput interface {
	pulumi.Input

	ToGetMetricAlertTriggerOutput() GetMetricAlertTriggerOutput
	ToGetMetricAlertTriggerOutputWithContext(context.Context) GetMetricAlertTriggerOutput
}

type GetMetricAlertTriggerArgs struct {
	Actions          GetMetricAlertTriggerActionArrayInput `pulumi:"actions"`
	AlertThreshold   pulumi.Float64Input                   `pulumi:"alertThreshold"`
	Id               pulumi.StringInput                    `pulumi:"id"`
	Label            pulumi.StringInput                    `pulumi:"label"`
	ResolveThreshold pulumi.Float64Input                   `pulumi:"resolveThreshold"`
	ThresholdType    pulumi.IntInput                       `pulumi:"thresholdType"`
}

func (GetMetricAlertTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricAlertTrigger)(nil)).Elem()
}

func (i GetMetricAlertTriggerArgs) ToGetMetricAlertTriggerOutput() GetMetricAlertTriggerOutput {
	return i.ToGetMetricAlertTriggerOutputWithContext(context.Background())
}

func (i GetMetricAlertTriggerArgs) ToGetMetricAlertTriggerOutputWithContext(ctx context.Context) GetMetricAlertTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricAlertTriggerOutput)
}

// GetMetricAlertTriggerArrayInput is an input type that accepts GetMetricAlertTriggerArray and GetMetricAlertTriggerArrayOutput values.
// You can construct a concrete instance of `GetMetricAlertTriggerArrayInput` via:
//
//	GetMetricAlertTriggerArray{ GetMetricAlertTriggerArgs{...} }
type GetMetricAlertTriggerArrayInput interface {
	pulumi.Input

	ToGetMetricAlertTriggerArrayOutput() GetMetricAlertTriggerArrayOutput
	ToGetMetricAlertTriggerArrayOutputWithContext(context.Context) GetMetricAlertTriggerArrayOutput
}

type GetMetricAlertTriggerArray []GetMetricAlertTriggerInput

func (GetMetricAlertTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricAlertTrigger)(nil)).Elem()
}

func (i GetMetricAlertTriggerArray) ToGetMetricAlertTriggerArrayOutput() GetMetricAlertTriggerArrayOutput {
	return i.ToGetMetricAlertTriggerArrayOutputWithContext(context.Background())
}

func (i GetMetricAlertTriggerArray) ToGetMetricAlertTriggerArrayOutputWithContext(ctx context.Context) GetMetricAlertTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricAlertTriggerArrayOutput)
}

type GetMetricAlertTriggerOutput struct{ *pulumi.OutputState }

func (GetMetricAlertTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricAlertTrigger)(nil)).Elem()
}

func (o GetMetricAlertTriggerOutput) ToGetMetricAlertTriggerOutput() GetMetricAlertTriggerOutput {
	return o
}

func (o GetMetricAlertTriggerOutput) ToGetMetricAlertTriggerOutputWithContext(ctx context.Context) GetMetricAlertTriggerOutput {
	return o
}

func (o GetMetricAlertTriggerOutput) Actions() GetMetricAlertTriggerActionArrayOutput {
	return o.ApplyT(func(v GetMetricAlertTrigger) []GetMetricAlertTriggerAction { return v.Actions }).(GetMetricAlertTriggerActionArrayOutput)
}

func (o GetMetricAlertTriggerOutput) AlertThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetMetricAlertTrigger) float64 { return v.AlertThreshold }).(pulumi.Float64Output)
}

func (o GetMetricAlertTriggerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTrigger) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMetricAlertTriggerOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTrigger) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetMetricAlertTriggerOutput) ResolveThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetMetricAlertTrigger) float64 { return v.ResolveThreshold }).(pulumi.Float64Output)
}

func (o GetMetricAlertTriggerOutput) ThresholdType() pulumi.IntOutput {
	return o.ApplyT(func(v GetMetricAlertTrigger) int { return v.ThresholdType }).(pulumi.IntOutput)
}

type GetMetricAlertTriggerArrayOutput struct{ *pulumi.OutputState }

func (GetMetricAlertTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricAlertTrigger)(nil)).Elem()
}

func (o GetMetricAlertTriggerArrayOutput) ToGetMetricAlertTriggerArrayOutput() GetMetricAlertTriggerArrayOutput {
	return o
}

func (o GetMetricAlertTriggerArrayOutput) ToGetMetricAlertTriggerArrayOutputWithContext(ctx context.Context) GetMetricAlertTriggerArrayOutput {
	return o
}

func (o GetMetricAlertTriggerArrayOutput) Index(i pulumi.IntInput) GetMetricAlertTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetricAlertTrigger {
		return vs[0].([]GetMetricAlertTrigger)[vs[1].(int)]
	}).(GetMetricAlertTriggerOutput)
}

type GetMetricAlertTriggerAction struct {
	Id               string `pulumi:"id"`
	TargetIdentifier string `pulumi:"targetIdentifier"`
	TargetType       string `pulumi:"targetType"`
	Type             string `pulumi:"type"`
}

// GetMetricAlertTriggerActionInput is an input type that accepts GetMetricAlertTriggerActionArgs and GetMetricAlertTriggerActionOutput values.
// You can construct a concrete instance of `GetMetricAlertTriggerActionInput` via:
//
//	GetMetricAlertTriggerActionArgs{...}
type GetMetricAlertTriggerActionInput interface {
	pulumi.Input

	ToGetMetricAlertTriggerActionOutput() GetMetricAlertTriggerActionOutput
	ToGetMetricAlertTriggerActionOutputWithContext(context.Context) GetMetricAlertTriggerActionOutput
}

type GetMetricAlertTriggerActionArgs struct {
	Id               pulumi.StringInput `pulumi:"id"`
	TargetIdentifier pulumi.StringInput `pulumi:"targetIdentifier"`
	TargetType       pulumi.StringInput `pulumi:"targetType"`
	Type             pulumi.StringInput `pulumi:"type"`
}

func (GetMetricAlertTriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricAlertTriggerAction)(nil)).Elem()
}

func (i GetMetricAlertTriggerActionArgs) ToGetMetricAlertTriggerActionOutput() GetMetricAlertTriggerActionOutput {
	return i.ToGetMetricAlertTriggerActionOutputWithContext(context.Background())
}

func (i GetMetricAlertTriggerActionArgs) ToGetMetricAlertTriggerActionOutputWithContext(ctx context.Context) GetMetricAlertTriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricAlertTriggerActionOutput)
}

// GetMetricAlertTriggerActionArrayInput is an input type that accepts GetMetricAlertTriggerActionArray and GetMetricAlertTriggerActionArrayOutput values.
// You can construct a concrete instance of `GetMetricAlertTriggerActionArrayInput` via:
//
//	GetMetricAlertTriggerActionArray{ GetMetricAlertTriggerActionArgs{...} }
type GetMetricAlertTriggerActionArrayInput interface {
	pulumi.Input

	ToGetMetricAlertTriggerActionArrayOutput() GetMetricAlertTriggerActionArrayOutput
	ToGetMetricAlertTriggerActionArrayOutputWithContext(context.Context) GetMetricAlertTriggerActionArrayOutput
}

type GetMetricAlertTriggerActionArray []GetMetricAlertTriggerActionInput

func (GetMetricAlertTriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricAlertTriggerAction)(nil)).Elem()
}

func (i GetMetricAlertTriggerActionArray) ToGetMetricAlertTriggerActionArrayOutput() GetMetricAlertTriggerActionArrayOutput {
	return i.ToGetMetricAlertTriggerActionArrayOutputWithContext(context.Background())
}

func (i GetMetricAlertTriggerActionArray) ToGetMetricAlertTriggerActionArrayOutputWithContext(ctx context.Context) GetMetricAlertTriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricAlertTriggerActionArrayOutput)
}

type GetMetricAlertTriggerActionOutput struct{ *pulumi.OutputState }

func (GetMetricAlertTriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricAlertTriggerAction)(nil)).Elem()
}

func (o GetMetricAlertTriggerActionOutput) ToGetMetricAlertTriggerActionOutput() GetMetricAlertTriggerActionOutput {
	return o
}

func (o GetMetricAlertTriggerActionOutput) ToGetMetricAlertTriggerActionOutputWithContext(ctx context.Context) GetMetricAlertTriggerActionOutput {
	return o
}

func (o GetMetricAlertTriggerActionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTriggerAction) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMetricAlertTriggerActionOutput) TargetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTriggerAction) string { return v.TargetIdentifier }).(pulumi.StringOutput)
}

func (o GetMetricAlertTriggerActionOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTriggerAction) string { return v.TargetType }).(pulumi.StringOutput)
}

func (o GetMetricAlertTriggerActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricAlertTriggerAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetMetricAlertTriggerActionArrayOutput struct{ *pulumi.OutputState }

func (GetMetricAlertTriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricAlertTriggerAction)(nil)).Elem()
}

func (o GetMetricAlertTriggerActionArrayOutput) ToGetMetricAlertTriggerActionArrayOutput() GetMetricAlertTriggerActionArrayOutput {
	return o
}

func (o GetMetricAlertTriggerActionArrayOutput) ToGetMetricAlertTriggerActionArrayOutputWithContext(ctx context.Context) GetMetricAlertTriggerActionArrayOutput {
	return o
}

func (o GetMetricAlertTriggerActionArrayOutput) Index(i pulumi.IntInput) GetMetricAlertTriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetricAlertTriggerAction {
		return vs[0].([]GetMetricAlertTriggerAction)[vs[1].(int)]
	}).(GetMetricAlertTriggerActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetInput)(nil)).Elem(), DashboardWidgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetArrayInput)(nil)).Elem(), DashboardWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetLayoutInput)(nil)).Elem(), DashboardWidgetLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetQueryInput)(nil)).Elem(), DashboardWidgetQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetQueryArrayInput)(nil)).Elem(), DashboardWidgetQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertTriggerInput)(nil)).Elem(), MetricAlertTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertTriggerArrayInput)(nil)).Elem(), MetricAlertTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertTriggerActionInput)(nil)).Elem(), MetricAlertTriggerActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertTriggerActionArrayInput)(nil)).Elem(), MetricAlertTriggerActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetInput)(nil)).Elem(), GetDashboardWidgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetArrayInput)(nil)).Elem(), GetDashboardWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetLayoutInput)(nil)).Elem(), GetDashboardWidgetLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetLayoutArrayInput)(nil)).Elem(), GetDashboardWidgetLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetQueryInput)(nil)).Elem(), GetDashboardWidgetQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardWidgetQueryArrayInput)(nil)).Elem(), GetDashboardWidgetQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricAlertTriggerInput)(nil)).Elem(), GetMetricAlertTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricAlertTriggerArrayInput)(nil)).Elem(), GetMetricAlertTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricAlertTriggerActionInput)(nil)).Elem(), GetMetricAlertTriggerActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricAlertTriggerActionArrayInput)(nil)).Elem(), GetMetricAlertTriggerActionArray{})
	pulumi.RegisterOutputType(DashboardWidgetOutput{})
	pulumi.RegisterOutputType(DashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetLayoutOutput{})
	pulumi.RegisterOutputType(DashboardWidgetQueryOutput{})
	pulumi.RegisterOutputType(DashboardWidgetQueryArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertTriggerOutput{})
	pulumi.RegisterOutputType(MetricAlertTriggerArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertTriggerActionOutput{})
	pulumi.RegisterOutputType(MetricAlertTriggerActionArrayOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetLayoutOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetLayoutArrayOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetQueryOutput{})
	pulumi.RegisterOutputType(GetDashboardWidgetQueryArrayOutput{})
	pulumi.RegisterOutputType(GetMetricAlertTriggerOutput{})
	pulumi.RegisterOutputType(GetMetricAlertTriggerArrayOutput{})
	pulumi.RegisterOutputType(GetMetricAlertTriggerActionOutput{})
	pulumi.RegisterOutputType(GetMetricAlertTriggerActionArrayOutput{})
}
