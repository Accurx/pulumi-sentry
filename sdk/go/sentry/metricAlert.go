// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetricAlert struct {
	pulumi.CustomResourceState

	// The aggregation criteria to apply
	Aggregate pulumi.StringOutput `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset pulumi.StringPtrOutput `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The internal ID for this metric alert.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The metric alert name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project pulumi.StringOutput `pulumi:"project"`
	// The query filter to apply
	Query pulumi.StringOutput `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrOutput `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType pulumi.IntOutput `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64Output          `pulumi:"timeWindow"`
	Triggers   MetricAlertTriggerArrayOutput `pulumi:"triggers"`
}

// NewMetricAlert registers a new resource with the given unique name, arguments, and options.
func NewMetricAlert(ctx *pulumi.Context,
	name string, args *MetricAlertArgs, opts ...pulumi.ResourceOption) (*MetricAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Aggregate == nil {
		return nil, errors.New("invalid value for required argument 'Aggregate'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.ThresholdType == nil {
		return nil, errors.New("invalid value for required argument 'ThresholdType'")
	}
	if args.TimeWindow == nil {
		return nil, errors.New("invalid value for required argument 'TimeWindow'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	var resource MetricAlert
	err := ctx.RegisterResource("sentry:index/metricAlert:MetricAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricAlert gets an existing MetricAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricAlertState, opts ...pulumi.ResourceOption) (*MetricAlert, error) {
	var resource MetricAlert
	err := ctx.ReadResource("sentry:index/metricAlert:MetricAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricAlert resources.
type metricAlertState struct {
	// The aggregation criteria to apply
	Aggregate *string `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset *string `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment *string `pulumi:"environment"`
	// The internal ID for this metric alert.
	InternalId *string `pulumi:"internalId"`
	// The metric alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization *string `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner *string `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project *string `pulumi:"project"`
	// The query filter to apply
	Query *string `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold *float64 `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType *int `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow *float64             `pulumi:"timeWindow"`
	Triggers   []MetricAlertTrigger `pulumi:"triggers"`
}

type MetricAlertState struct {
	// The aggregation criteria to apply
	Aggregate pulumi.StringPtrInput
	// The Sentry Alert category
	Dataset pulumi.StringPtrInput
	// Perform Alert rule in a specific environment
	Environment pulumi.StringPtrInput
	// The internal ID for this metric alert.
	InternalId pulumi.StringPtrInput
	// The metric alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringPtrInput
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringPtrInput
	// The slug of the project to create the metric alert for.
	Project pulumi.StringPtrInput
	// The query filter to apply
	Query pulumi.StringPtrInput
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrInput
	// The type of threshold
	ThresholdType pulumi.IntPtrInput
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64PtrInput
	Triggers   MetricAlertTriggerArrayInput
}

func (MetricAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlertState)(nil)).Elem()
}

type metricAlertArgs struct {
	// The aggregation criteria to apply
	Aggregate string `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset *string `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment *string `pulumi:"environment"`
	// The metric alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization string `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner *string `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project string `pulumi:"project"`
	// The query filter to apply
	Query string `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold *float64 `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType int `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow float64              `pulumi:"timeWindow"`
	Triggers   []MetricAlertTrigger `pulumi:"triggers"`
}

// The set of arguments for constructing a MetricAlert resource.
type MetricAlertArgs struct {
	// The aggregation criteria to apply
	Aggregate pulumi.StringInput
	// The Sentry Alert category
	Dataset pulumi.StringPtrInput
	// Perform Alert rule in a specific environment
	Environment pulumi.StringPtrInput
	// The metric alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringInput
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringPtrInput
	// The slug of the project to create the metric alert for.
	Project pulumi.StringInput
	// The query filter to apply
	Query pulumi.StringInput
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrInput
	// The type of threshold
	ThresholdType pulumi.IntInput
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64Input
	Triggers   MetricAlertTriggerArrayInput
}

func (MetricAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlertArgs)(nil)).Elem()
}

type MetricAlertInput interface {
	pulumi.Input

	ToMetricAlertOutput() MetricAlertOutput
	ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput
}

func (*MetricAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlert)(nil)).Elem()
}

func (i *MetricAlert) ToMetricAlertOutput() MetricAlertOutput {
	return i.ToMetricAlertOutputWithContext(context.Background())
}

func (i *MetricAlert) ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertOutput)
}

// MetricAlertArrayInput is an input type that accepts MetricAlertArray and MetricAlertArrayOutput values.
// You can construct a concrete instance of `MetricAlertArrayInput` via:
//
//	MetricAlertArray{ MetricAlertArgs{...} }
type MetricAlertArrayInput interface {
	pulumi.Input

	ToMetricAlertArrayOutput() MetricAlertArrayOutput
	ToMetricAlertArrayOutputWithContext(context.Context) MetricAlertArrayOutput
}

type MetricAlertArray []MetricAlertInput

func (MetricAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlert)(nil)).Elem()
}

func (i MetricAlertArray) ToMetricAlertArrayOutput() MetricAlertArrayOutput {
	return i.ToMetricAlertArrayOutputWithContext(context.Background())
}

func (i MetricAlertArray) ToMetricAlertArrayOutputWithContext(ctx context.Context) MetricAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertArrayOutput)
}

// MetricAlertMapInput is an input type that accepts MetricAlertMap and MetricAlertMapOutput values.
// You can construct a concrete instance of `MetricAlertMapInput` via:
//
//	MetricAlertMap{ "key": MetricAlertArgs{...} }
type MetricAlertMapInput interface {
	pulumi.Input

	ToMetricAlertMapOutput() MetricAlertMapOutput
	ToMetricAlertMapOutputWithContext(context.Context) MetricAlertMapOutput
}

type MetricAlertMap map[string]MetricAlertInput

func (MetricAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlert)(nil)).Elem()
}

func (i MetricAlertMap) ToMetricAlertMapOutput() MetricAlertMapOutput {
	return i.ToMetricAlertMapOutputWithContext(context.Background())
}

func (i MetricAlertMap) ToMetricAlertMapOutputWithContext(ctx context.Context) MetricAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertMapOutput)
}

type MetricAlertOutput struct{ *pulumi.OutputState }

func (MetricAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlert)(nil)).Elem()
}

func (o MetricAlertOutput) ToMetricAlertOutput() MetricAlertOutput {
	return o
}

func (o MetricAlertOutput) ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput {
	return o
}

// The aggregation criteria to apply
func (o MetricAlertOutput) Aggregate() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Aggregate }).(pulumi.StringOutput)
}

// The Sentry Alert category
func (o MetricAlertOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringPtrOutput { return v.Dataset }).(pulumi.StringPtrOutput)
}

// Perform Alert rule in a specific environment
func (o MetricAlertOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The internal ID for this metric alert.
func (o MetricAlertOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The metric alert name.
func (o MetricAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the metric alert belongs to.
func (o MetricAlertOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Specifies the owner id of this Alert rule
func (o MetricAlertOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The slug of the project to create the metric alert for.
func (o MetricAlertOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The query filter to apply
func (o MetricAlertOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// The value at which the Alert rule resolves
func (o MetricAlertOutput) ResolveThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.Float64PtrOutput { return v.ResolveThreshold }).(pulumi.Float64PtrOutput)
}

// The type of threshold
func (o MetricAlertOutput) ThresholdType() pulumi.IntOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.IntOutput { return v.ThresholdType }).(pulumi.IntOutput)
}

// The period to evaluate the Alert rule in minutes
func (o MetricAlertOutput) TimeWindow() pulumi.Float64Output {
	return o.ApplyT(func(v *MetricAlert) pulumi.Float64Output { return v.TimeWindow }).(pulumi.Float64Output)
}

func (o MetricAlertOutput) Triggers() MetricAlertTriggerArrayOutput {
	return o.ApplyT(func(v *MetricAlert) MetricAlertTriggerArrayOutput { return v.Triggers }).(MetricAlertTriggerArrayOutput)
}

type MetricAlertArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlert)(nil)).Elem()
}

func (o MetricAlertArrayOutput) ToMetricAlertArrayOutput() MetricAlertArrayOutput {
	return o
}

func (o MetricAlertArrayOutput) ToMetricAlertArrayOutputWithContext(ctx context.Context) MetricAlertArrayOutput {
	return o
}

func (o MetricAlertArrayOutput) Index(i pulumi.IntInput) MetricAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricAlert {
		return vs[0].([]*MetricAlert)[vs[1].(int)]
	}).(MetricAlertOutput)
}

type MetricAlertMapOutput struct{ *pulumi.OutputState }

func (MetricAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlert)(nil)).Elem()
}

func (o MetricAlertMapOutput) ToMetricAlertMapOutput() MetricAlertMapOutput {
	return o
}

func (o MetricAlertMapOutput) ToMetricAlertMapOutputWithContext(ctx context.Context) MetricAlertMapOutput {
	return o
}

func (o MetricAlertMapOutput) MapIndex(k pulumi.StringInput) MetricAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricAlert {
		return vs[0].(map[string]*MetricAlert)[vs[1].(string)]
	}).(MetricAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertInput)(nil)).Elem(), &MetricAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertArrayInput)(nil)).Elem(), MetricAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertMapInput)(nil)).Elem(), MetricAlertMap{})
	pulumi.RegisterOutputType(MetricAlertOutput{})
	pulumi.RegisterOutputType(MetricAlertArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertMapOutput{})
}
