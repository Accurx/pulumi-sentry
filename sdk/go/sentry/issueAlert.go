// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IssueAlert struct {
	pulumi.CustomResourceState

	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringOutput `pulumi:"actionMatch"`
	// List of actions.
	Actions pulumi.MapArrayOutput `pulumi:"actions"`
	// List of conditions.
	Conditions pulumi.MapArrayOutput `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch pulumi.StringOutput `pulumi:"filterMatch"`
	// List of filters.
	Filters pulumi.MapArrayOutput `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// The internal ID for this issue alert.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The issue alert name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the issue alert belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project to create the issue alert for.
	Project pulumi.StringOutput `pulumi:"project"`
	// Use `project` (singular) instead.
	//
	// Deprecated: Use `project` (singular) instead.
	Projects pulumi.StringArrayOutput `pulumi:"projects"`
}

// NewIssueAlert registers a new resource with the given unique name, arguments, and options.
func NewIssueAlert(ctx *pulumi.Context,
	name string, args *IssueAlertArgs, opts ...pulumi.ResourceOption) (*IssueAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionMatch == nil {
		return nil, errors.New("invalid value for required argument 'ActionMatch'")
	}
	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.FilterMatch == nil {
		return nil, errors.New("invalid value for required argument 'FilterMatch'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource IssueAlert
	err := ctx.RegisterResource("sentry:index/issueAlert:IssueAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssueAlert gets an existing IssueAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssueAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueAlertState, opts ...pulumi.ResourceOption) (*IssueAlert, error) {
	var resource IssueAlert
	err := ctx.ReadResource("sentry:index/issueAlert:IssueAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssueAlert resources.
type issueAlertState struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch *string `pulumi:"actionMatch"`
	// List of actions.
	Actions []map[string]interface{} `pulumi:"actions"`
	// List of conditions.
	Conditions []map[string]interface{} `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment *string `pulumi:"environment"`
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch *string `pulumi:"filterMatch"`
	// List of filters.
	Filters []map[string]interface{} `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency *int `pulumi:"frequency"`
	// The internal ID for this issue alert.
	InternalId *string `pulumi:"internalId"`
	// The issue alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the issue alert belongs to.
	Organization *string `pulumi:"organization"`
	// The slug of the project to create the issue alert for.
	Project *string `pulumi:"project"`
	// Use `project` (singular) instead.
	//
	// Deprecated: Use `project` (singular) instead.
	Projects []string `pulumi:"projects"`
}

type IssueAlertState struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringPtrInput
	// List of actions.
	Actions pulumi.MapArrayInput
	// List of conditions.
	Conditions pulumi.MapArrayInput
	// Perform issue alert in a specific environment.
	Environment pulumi.StringPtrInput
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch pulumi.StringPtrInput
	// List of filters.
	Filters pulumi.MapArrayInput
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntPtrInput
	// The internal ID for this issue alert.
	InternalId pulumi.StringPtrInput
	// The issue alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the issue alert belongs to.
	Organization pulumi.StringPtrInput
	// The slug of the project to create the issue alert for.
	Project pulumi.StringPtrInput
	// Use `project` (singular) instead.
	//
	// Deprecated: Use `project` (singular) instead.
	Projects pulumi.StringArrayInput
}

func (IssueAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueAlertState)(nil)).Elem()
}

type issueAlertArgs struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch string `pulumi:"actionMatch"`
	// List of actions.
	Actions []map[string]interface{} `pulumi:"actions"`
	// List of conditions.
	Conditions []map[string]interface{} `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment *string `pulumi:"environment"`
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch string `pulumi:"filterMatch"`
	// List of filters.
	Filters []map[string]interface{} `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency int `pulumi:"frequency"`
	// The issue alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the issue alert belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project to create the issue alert for.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a IssueAlert resource.
type IssueAlertArgs struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringInput
	// List of actions.
	Actions pulumi.MapArrayInput
	// List of conditions.
	Conditions pulumi.MapArrayInput
	// Perform issue alert in a specific environment.
	Environment pulumi.StringPtrInput
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch pulumi.StringInput
	// List of filters.
	Filters pulumi.MapArrayInput
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntInput
	// The issue alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the issue alert belongs to.
	Organization pulumi.StringInput
	// The slug of the project to create the issue alert for.
	Project pulumi.StringInput
}

func (IssueAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueAlertArgs)(nil)).Elem()
}

type IssueAlertInput interface {
	pulumi.Input

	ToIssueAlertOutput() IssueAlertOutput
	ToIssueAlertOutputWithContext(ctx context.Context) IssueAlertOutput
}

func (*IssueAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueAlert)(nil)).Elem()
}

func (i *IssueAlert) ToIssueAlertOutput() IssueAlertOutput {
	return i.ToIssueAlertOutputWithContext(context.Background())
}

func (i *IssueAlert) ToIssueAlertOutputWithContext(ctx context.Context) IssueAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueAlertOutput)
}

// IssueAlertArrayInput is an input type that accepts IssueAlertArray and IssueAlertArrayOutput values.
// You can construct a concrete instance of `IssueAlertArrayInput` via:
//
//	IssueAlertArray{ IssueAlertArgs{...} }
type IssueAlertArrayInput interface {
	pulumi.Input

	ToIssueAlertArrayOutput() IssueAlertArrayOutput
	ToIssueAlertArrayOutputWithContext(context.Context) IssueAlertArrayOutput
}

type IssueAlertArray []IssueAlertInput

func (IssueAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueAlert)(nil)).Elem()
}

func (i IssueAlertArray) ToIssueAlertArrayOutput() IssueAlertArrayOutput {
	return i.ToIssueAlertArrayOutputWithContext(context.Background())
}

func (i IssueAlertArray) ToIssueAlertArrayOutputWithContext(ctx context.Context) IssueAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueAlertArrayOutput)
}

// IssueAlertMapInput is an input type that accepts IssueAlertMap and IssueAlertMapOutput values.
// You can construct a concrete instance of `IssueAlertMapInput` via:
//
//	IssueAlertMap{ "key": IssueAlertArgs{...} }
type IssueAlertMapInput interface {
	pulumi.Input

	ToIssueAlertMapOutput() IssueAlertMapOutput
	ToIssueAlertMapOutputWithContext(context.Context) IssueAlertMapOutput
}

type IssueAlertMap map[string]IssueAlertInput

func (IssueAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueAlert)(nil)).Elem()
}

func (i IssueAlertMap) ToIssueAlertMapOutput() IssueAlertMapOutput {
	return i.ToIssueAlertMapOutputWithContext(context.Background())
}

func (i IssueAlertMap) ToIssueAlertMapOutputWithContext(ctx context.Context) IssueAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueAlertMapOutput)
}

type IssueAlertOutput struct{ *pulumi.OutputState }

func (IssueAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueAlert)(nil)).Elem()
}

func (o IssueAlertOutput) ToIssueAlertOutput() IssueAlertOutput {
	return o
}

func (o IssueAlertOutput) ToIssueAlertOutputWithContext(ctx context.Context) IssueAlertOutput {
	return o
}

// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
func (o IssueAlertOutput) ActionMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.ActionMatch }).(pulumi.StringOutput)
}

// List of actions.
func (o IssueAlertOutput) Actions() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.MapArrayOutput { return v.Actions }).(pulumi.MapArrayOutput)
}

// List of conditions.
func (o IssueAlertOutput) Conditions() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.MapArrayOutput { return v.Conditions }).(pulumi.MapArrayOutput)
}

// Perform issue alert in a specific environment.
func (o IssueAlertOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Trigger actions if `all`, `any`, or `none` of the specified filters match.
func (o IssueAlertOutput) FilterMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.FilterMatch }).(pulumi.StringOutput)
}

// List of filters.
func (o IssueAlertOutput) Filters() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.MapArrayOutput { return v.Filters }).(pulumi.MapArrayOutput)
}

// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
func (o IssueAlertOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// The internal ID for this issue alert.
func (o IssueAlertOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The issue alert name.
func (o IssueAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the issue alert belongs to.
func (o IssueAlertOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project to create the issue alert for.
func (o IssueAlertOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Use `project` (singular) instead.
//
// Deprecated: Use `project` (singular) instead.
func (o IssueAlertOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IssueAlert) pulumi.StringArrayOutput { return v.Projects }).(pulumi.StringArrayOutput)
}

type IssueAlertArrayOutput struct{ *pulumi.OutputState }

func (IssueAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueAlert)(nil)).Elem()
}

func (o IssueAlertArrayOutput) ToIssueAlertArrayOutput() IssueAlertArrayOutput {
	return o
}

func (o IssueAlertArrayOutput) ToIssueAlertArrayOutputWithContext(ctx context.Context) IssueAlertArrayOutput {
	return o
}

func (o IssueAlertArrayOutput) Index(i pulumi.IntInput) IssueAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IssueAlert {
		return vs[0].([]*IssueAlert)[vs[1].(int)]
	}).(IssueAlertOutput)
}

type IssueAlertMapOutput struct{ *pulumi.OutputState }

func (IssueAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueAlert)(nil)).Elem()
}

func (o IssueAlertMapOutput) ToIssueAlertMapOutput() IssueAlertMapOutput {
	return o
}

func (o IssueAlertMapOutput) ToIssueAlertMapOutputWithContext(ctx context.Context) IssueAlertMapOutput {
	return o
}

func (o IssueAlertMapOutput) MapIndex(k pulumi.StringInput) IssueAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IssueAlert {
		return vs[0].(map[string]*IssueAlert)[vs[1].(string)]
	}).(IssueAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssueAlertInput)(nil)).Elem(), &IssueAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueAlertArrayInput)(nil)).Elem(), IssueAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueAlertMapInput)(nil)).Elem(), IssueAlertMap{})
	pulumi.RegisterOutputType(IssueAlertOutput{})
	pulumi.RegisterOutputType(IssueAlertArrayOutput{})
	pulumi.RegisterOutputType(IssueAlertMapOutput{})
}
