// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Key struct {
	pulumi.CustomResourceState

	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp pulumi.StringOutput `pulumi:"dsnCsp"`
	// DSN for the key.
	DsnPublic pulumi.StringOutput `pulumi:"dsnPublic"`
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret pulumi.StringOutput `pulumi:"dsnSecret"`
	// Flag indicating the key is active.
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// The name of the key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID of the project that the key belongs to.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Public key portion of the client key.
	Public pulumi.StringOutput `pulumi:"public"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntOutput `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntOutput `pulumi:"rateLimitWindow"`
	// Secret key portion of the client key.
	Secret pulumi.StringOutput `pulumi:"secret"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource Key
	err := ctx.RegisterResource("sentry:index/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("sentry:index/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp *string `pulumi:"dsnCsp"`
	// DSN for the key.
	DsnPublic *string `pulumi:"dsnPublic"`
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret *string `pulumi:"dsnSecret"`
	// Flag indicating the key is active.
	IsActive *bool `pulumi:"isActive"`
	// The name of the key.
	Name *string `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization *string `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project *string `pulumi:"project"`
	// The ID of the project that the key belongs to.
	ProjectId *int `pulumi:"projectId"`
	// Public key portion of the client key.
	Public *string `pulumi:"public"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount *int `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow *int `pulumi:"rateLimitWindow"`
	// Secret key portion of the client key.
	Secret *string `pulumi:"secret"`
}

type KeyState struct {
	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp pulumi.StringPtrInput
	// DSN for the key.
	DsnPublic pulumi.StringPtrInput
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret pulumi.StringPtrInput
	// Flag indicating the key is active.
	IsActive pulumi.BoolPtrInput
	// The name of the key.
	Name pulumi.StringPtrInput
	// The slug of the organization the key should be created for.
	Organization pulumi.StringPtrInput
	// The slug of the project the key should be created for.
	Project pulumi.StringPtrInput
	// The ID of the project that the key belongs to.
	ProjectId pulumi.IntPtrInput
	// Public key portion of the client key.
	Public pulumi.StringPtrInput
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntPtrInput
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntPtrInput
	// Secret key portion of the client key.
	Secret pulumi.StringPtrInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// The name of the key.
	Name *string `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization string `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project string `pulumi:"project"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount *int `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow *int `pulumi:"rateLimitWindow"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// The name of the key.
	Name pulumi.StringPtrInput
	// The slug of the organization the key should be created for.
	Organization pulumi.StringInput
	// The slug of the project the key should be created for.
	Project pulumi.StringInput
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntPtrInput
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntPtrInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

// KeyArrayInput is an input type that accepts KeyArray and KeyArrayOutput values.
// You can construct a concrete instance of `KeyArrayInput` via:
//
//	KeyArray{ KeyArgs{...} }
type KeyArrayInput interface {
	pulumi.Input

	ToKeyArrayOutput() KeyArrayOutput
	ToKeyArrayOutputWithContext(context.Context) KeyArrayOutput
}

type KeyArray []KeyInput

func (KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (i KeyArray) ToKeyArrayOutput() KeyArrayOutput {
	return i.ToKeyArrayOutputWithContext(context.Background())
}

func (i KeyArray) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArrayOutput)
}

// KeyMapInput is an input type that accepts KeyMap and KeyMapOutput values.
// You can construct a concrete instance of `KeyMapInput` via:
//
//	KeyMap{ "key": KeyArgs{...} }
type KeyMapInput interface {
	pulumi.Input

	ToKeyMapOutput() KeyMapOutput
	ToKeyMapOutputWithContext(context.Context) KeyMapOutput
}

type KeyMap map[string]KeyInput

func (KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (i KeyMap) ToKeyMapOutput() KeyMapOutput {
	return i.ToKeyMapOutputWithContext(context.Background())
}

func (i KeyMap) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMapOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

// DSN for the Content Security Policy (CSP) for the key.
func (o KeyOutput) DsnCsp() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DsnCsp }).(pulumi.StringOutput)
}

// DSN for the key.
func (o KeyOutput) DsnPublic() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DsnPublic }).(pulumi.StringOutput)
}

// Deprecated: DSN (Deprecated) for the key.
func (o KeyOutput) DsnSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DsnSecret }).(pulumi.StringOutput)
}

// Flag indicating the key is active.
func (o KeyOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// The name of the key.
func (o KeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the key should be created for.
func (o KeyOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project the key should be created for.
func (o KeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID of the project that the key belongs to.
func (o KeyOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Public key portion of the client key.
func (o KeyOutput) Public() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Public }).(pulumi.StringOutput)
}

// Number of events that can be reported within the rate limit window.
func (o KeyOutput) RateLimitCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RateLimitCount }).(pulumi.IntOutput)
}

// Length of time that will be considered when checking the rate limit.
func (o KeyOutput) RateLimitWindow() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RateLimitWindow }).(pulumi.IntOutput)
}

// Secret key portion of the client key.
func (o KeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

type KeyArrayOutput struct{ *pulumi.OutputState }

func (KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (o KeyArrayOutput) ToKeyArrayOutput() KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) Index(i pulumi.IntInput) KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Key {
		return vs[0].([]*Key)[vs[1].(int)]
	}).(KeyOutput)
}

type KeyMapOutput struct{ *pulumi.OutputState }

func (KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (o KeyMapOutput) ToKeyMapOutput() KeyMapOutput {
	return o
}

func (o KeyMapOutput) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return o
}

func (o KeyMapOutput) MapIndex(k pulumi.StringInput) KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Key {
		return vs[0].(map[string]*Key)[vs[1].(string)]
	}).(KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArrayInput)(nil)).Elem(), KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMapInput)(nil)).Elem(), KeyMap{})
	pulumi.RegisterOutputType(KeyOutput{})
	pulumi.RegisterOutputType(KeyArrayOutput{})
	pulumi.RegisterOutputType(KeyMapOutput{})
}
