// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sentry
{
    [SentryResourceType("sentry:index/key:Key")]
    public partial class Key : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DSN for the Content Security Policy (CSP) for the key.
        /// </summary>
        [Output("dsnCsp")]
        public Output<string> DsnCsp { get; private set; } = null!;

        /// <summary>
        /// DSN for the key.
        /// </summary>
        [Output("dsnPublic")]
        public Output<string> DsnPublic { get; private set; } = null!;

        [Output("dsnSecret")]
        public Output<string> DsnSecret { get; private set; } = null!;

        /// <summary>
        /// Flag indicating the key is active.
        /// </summary>
        [Output("isActive")]
        public Output<bool> IsActive { get; private set; } = null!;

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The slug of the organization the key should be created for.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The slug of the project the key should be created for.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The ID of the project that the key belongs to.
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Public key portion of the client key.
        /// </summary>
        [Output("public")]
        public Output<string> Public { get; private set; } = null!;

        /// <summary>
        /// Number of events that can be reported within the rate limit window.
        /// </summary>
        [Output("rateLimitCount")]
        public Output<int> RateLimitCount { get; private set; } = null!;

        /// <summary>
        /// Length of time that will be considered when checking the rate limit.
        /// </summary>
        [Output("rateLimitWindow")]
        public Output<int> RateLimitWindow { get; private set; } = null!;

        /// <summary>
        /// Secret key portion of the client key.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a Key resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Key(string name, KeyArgs args, CustomResourceOptions? options = null)
            : base("sentry:index/key:Key", name, args ?? new KeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Key(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
            : base("sentry:index/key:Key", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Key resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Key Get(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
        {
            return new Key(name, id, state, options);
        }
    }

    public sealed class KeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the key should be created for.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The slug of the project the key should be created for.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Number of events that can be reported within the rate limit window.
        /// </summary>
        [Input("rateLimitCount")]
        public Input<int>? RateLimitCount { get; set; }

        /// <summary>
        /// Length of time that will be considered when checking the rate limit.
        /// </summary>
        [Input("rateLimitWindow")]
        public Input<int>? RateLimitWindow { get; set; }

        public KeyArgs()
        {
        }
        public static new KeyArgs Empty => new KeyArgs();
    }

    public sealed class KeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DSN for the Content Security Policy (CSP) for the key.
        /// </summary>
        [Input("dsnCsp")]
        public Input<string>? DsnCsp { get; set; }

        /// <summary>
        /// DSN for the key.
        /// </summary>
        [Input("dsnPublic")]
        public Input<string>? DsnPublic { get; set; }

        [Input("dsnSecret")]
        public Input<string>? DsnSecret { get; set; }

        /// <summary>
        /// Flag indicating the key is active.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the key should be created for.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The slug of the project the key should be created for.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the project that the key belongs to.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Public key portion of the client key.
        /// </summary>
        [Input("public")]
        public Input<string>? Public { get; set; }

        /// <summary>
        /// Number of events that can be reported within the rate limit window.
        /// </summary>
        [Input("rateLimitCount")]
        public Input<int>? RateLimitCount { get; set; }

        /// <summary>
        /// Length of time that will be considered when checking the rate limit.
        /// </summary>
        [Input("rateLimitWindow")]
        public Input<int>? RateLimitWindow { get; set; }

        /// <summary>
        /// Secret key portion of the client key.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        public KeyState()
        {
        }
        public static new KeyState Empty => new KeyState();
    }
}
