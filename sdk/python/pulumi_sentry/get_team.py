# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, has_access=None, id=None, internal_id=None, is_member=None, is_pending=None, name=None, organization=None, slug=None):
        if has_access and not isinstance(has_access, bool):
            raise TypeError("Expected argument 'has_access' to be a bool")
        pulumi.set(__self__, "has_access", has_access)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_id and not isinstance(internal_id, str):
            raise TypeError("Expected argument 'internal_id' to be a str")
        pulumi.set(__self__, "internal_id", internal_id)
        if is_member and not isinstance(is_member, bool):
            raise TypeError("Expected argument 'is_member' to be a bool")
        pulumi.set(__self__, "is_member", is_member)
        if is_pending and not isinstance(is_pending, bool):
            raise TypeError("Expected argument 'is_pending' to be a bool")
        pulumi.set(__self__, "is_pending", is_pending)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="hasAccess")
    def has_access(self) -> bool:
        return pulumi.get(self, "has_access")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> str:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="isMember")
    def is_member(self) -> bool:
        return pulumi.get(self, "is_member")

    @property
    @pulumi.getter(name="isPending")
    def is_pending(self) -> bool:
        return pulumi.get(self, "is_pending")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            has_access=self.has_access,
            id=self.id,
            internal_id=self.internal_id,
            is_member=self.is_member,
            is_pending=self.is_pending,
            name=self.name,
            organization=self.organization,
            slug=self.slug)


def get_team(organization: Optional[str] = None,
             slug: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['organization'] = organization
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sentry:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        has_access=__ret__.has_access,
        id=__ret__.id,
        internal_id=__ret__.internal_id,
        is_member=__ret__.is_member,
        is_pending=__ret__.is_pending,
        name=__ret__.name,
        organization=__ret__.organization,
        slug=__ret__.slug)


@_utilities.lift_output_func(get_team)
def get_team_output(organization: Optional[pulumi.Input[str]] = None,
                    slug: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
