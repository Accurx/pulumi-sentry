{
    "name": "sentry",
    "description": "A Pulumi package for creating and managing sentry cloud resources.",
    "keywords": [
        "pulumi",
        "sentry",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sentry` Terraform Provider](https://github.com/sentry/terraform-provider-sentry).",
    "repository": "https://github.com/baskar-natarajan/pulumi-provider-sentry",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-sentry/sdk/go/sentry"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing sentry cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sentry/terraform-provider-sentry)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sentry` repo](https://github.com/baskar-natarajan/pulumi-provider-sentry/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sentry` repo](https://github.com/sentry/terraform-provider-sentry/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sentry/terraform-provider-sentry)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sentry` repo](https://github.com/baskar-natarajan/pulumi-provider-sentry/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sentry` repo](https://github.com/sentry/terraform-provider-sentry/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "sentry:index/DashboardWidget:DashboardWidget": {
            "properties": {
                "displayType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layout": {
                    "$ref": "#/types/sentry:index/DashboardWidgetLayout:DashboardWidgetLayout",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/DashboardWidgetQuery:DashboardWidgetQuery"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "displayType",
                "layout",
                "queries",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayType",
                        "id",
                        "interval",
                        "layout",
                        "limit",
                        "queries",
                        "title",
                        "widgetType"
                    ]
                }
            }
        },
        "sentry:index/DashboardWidgetLayout:DashboardWidgetLayout": {
            "properties": {
                "h": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minH": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "w": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "x": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "h",
                "minH",
                "w",
                "x",
                "y"
            ]
        },
        "sentry:index/DashboardWidgetQuery:DashboardWidgetQuery": {
            "properties": {
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregates",
                        "columns",
                        "conditions",
                        "fieldAliases",
                        "fields",
                        "id",
                        "orderBy"
                    ]
                }
            }
        },
        "sentry:index/MetricAlertTrigger:MetricAlertTrigger": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/MetricAlertTriggerAction:MetricAlertTriggerAction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alertThreshold",
                "label",
                "thresholdType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertThreshold",
                        "id",
                        "label",
                        "resolveThreshold",
                        "thresholdType"
                    ]
                }
            }
        },
        "sentry:index/MetricAlertTriggerAction:MetricAlertTriggerAction": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "targetIdentifier",
                "targetType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "targetIdentifier",
                        "targetType",
                        "type"
                    ]
                }
            }
        },
        "sentry:index/getDashboardWidget:getDashboardWidget": {
            "properties": {
                "displayType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "layouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getDashboardWidgetLayout:getDashboardWidgetLayout"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getDashboardWidgetQuery:getDashboardWidgetQuery"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "widgetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "displayType",
                "id",
                "interval",
                "layouts",
                "limit",
                "queries",
                "title",
                "widgetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getDashboardWidgetLayout:getDashboardWidgetLayout": {
            "properties": {
                "h": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minH": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "w": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "x": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "y": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "h",
                "minH",
                "w",
                "x",
                "y"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getDashboardWidgetQuery:getDashboardWidgetQuery": {
            "properties": {
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orderBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aggregates",
                "columns",
                "conditions",
                "fieldAliases",
                "fields",
                "id",
                "name",
                "orderBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getMetricAlertTrigger:getMetricAlertTrigger": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getMetricAlertTriggerAction:getMetricAlertTriggerAction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "alertThreshold",
                "id",
                "label",
                "resolveThreshold",
                "thresholdType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getMetricAlertTriggerAction:getMetricAlertTriggerAction": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetIdentifier": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "targetIdentifier",
                "targetType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the sentry package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n"
            }
        },
        "required": [
            "token"
        ],
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "sentry:index/dashboard:Dashboard": {
            "properties": {
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this dashboard.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the dashboard belongs to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Dashboard title.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/DashboardWidget:DashboardWidget"
                    },
                    "description": "Dashboard widgets.\n"
                }
            },
            "required": [
                "internalId",
                "organization",
                "title"
            ],
            "inputProperties": {
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the dashboard belongs to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Dashboard title.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/DashboardWidget:DashboardWidget"
                    },
                    "description": "Dashboard widgets.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this dashboard.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the dashboard belongs to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Dashboard title.\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/DashboardWidget:DashboardWidget"
                        },
                        "description": "Dashboard widgets.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/issueAlert:IssueAlert": {
            "properties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of actions.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of conditions.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of filters.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this issue alert.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the issue alert belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the issue alert for.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use `project` (singular) instead.\n",
                    "deprecationMessage": "Use `project` (singular) instead."
                }
            },
            "required": [
                "actionMatch",
                "actions",
                "conditions",
                "environment",
                "filterMatch",
                "frequency",
                "internalId",
                "name",
                "organization",
                "project",
                "projects"
            ],
            "inputProperties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of actions.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of conditions.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of filters.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the issue alert belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the issue alert for.\n"
                }
            },
            "requiredInputs": [
                "actionMatch",
                "actions",
                "conditions",
                "filterMatch",
                "frequency",
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IssueAlert resources.\n",
                "properties": {
                    "actionMatch": {
                        "type": "string",
                        "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of actions.\n"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of conditions.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform issue alert in a specific environment.\n"
                    },
                    "filterMatch": {
                        "type": "string",
                        "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of filters.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this issue alert.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The issue alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the issue alert belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the issue alert for.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Use `project` (singular) instead.\n",
                        "deprecationMessage": "Use `project` (singular) instead."
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/key:Key": {
            "properties": {
                "dsnCsp": {
                    "type": "string",
                    "description": "DSN for the Content Security Policy (CSP) for the key.\n"
                },
                "dsnPublic": {
                    "type": "string",
                    "description": "DSN for the key.\n"
                },
                "dsnSecret": {
                    "type": "string",
                    "deprecationMessage": "DSN (Deprecated) for the key."
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Flag indicating the key is active.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the key should be created for.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the key should be created for.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The ID of the project that the key belongs to.\n"
                },
                "public": {
                    "type": "string",
                    "description": "Public key portion of the client key.\n"
                },
                "rateLimitCount": {
                    "type": "integer",
                    "description": "Number of events that can be reported within the rate limit window.\n"
                },
                "rateLimitWindow": {
                    "type": "integer",
                    "description": "Length of time that will be considered when checking the rate limit.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret key portion of the client key.\n"
                }
            },
            "required": [
                "dsnCsp",
                "dsnPublic",
                "dsnSecret",
                "isActive",
                "name",
                "organization",
                "project",
                "projectId",
                "public",
                "rateLimitCount",
                "rateLimitWindow",
                "secret"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the key.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the key should be created for.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the key should be created for.\n"
                },
                "rateLimitCount": {
                    "type": "integer",
                    "description": "Number of events that can be reported within the rate limit window.\n"
                },
                "rateLimitWindow": {
                    "type": "integer",
                    "description": "Length of time that will be considered when checking the rate limit.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Key resources.\n",
                "properties": {
                    "dsnCsp": {
                        "type": "string",
                        "description": "DSN for the Content Security Policy (CSP) for the key.\n"
                    },
                    "dsnPublic": {
                        "type": "string",
                        "description": "DSN for the key.\n"
                    },
                    "dsnSecret": {
                        "type": "string",
                        "deprecationMessage": "DSN (Deprecated) for the key."
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Flag indicating the key is active.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the key.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the key should be created for.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the key should be created for.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The ID of the project that the key belongs to.\n"
                    },
                    "public": {
                        "type": "string",
                        "description": "Public key portion of the client key.\n"
                    },
                    "rateLimitCount": {
                        "type": "integer",
                        "description": "Number of events that can be reported within the rate limit window.\n"
                    },
                    "rateLimitWindow": {
                        "type": "integer",
                        "description": "Length of time that will be considered when checking the rate limit.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret key portion of the client key.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/metricAlert:MetricAlert": {
            "properties": {
                "aggregate": {
                    "type": "string",
                    "description": "The aggregation criteria to apply\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The Sentry Alert category\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform Alert rule in a specific environment\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this metric alert.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The metric alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the metric alert belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Specifies the owner id of this Alert rule\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the metric alert for.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The query filter to apply\n"
                },
                "resolveThreshold": {
                    "type": "number",
                    "description": "The value at which the Alert rule resolves\n"
                },
                "thresholdType": {
                    "type": "integer",
                    "description": "The type of threshold\n"
                },
                "timeWindow": {
                    "type": "number",
                    "description": "The period to evaluate the Alert rule in minutes\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/MetricAlertTrigger:MetricAlertTrigger"
                    }
                }
            },
            "required": [
                "aggregate",
                "environment",
                "internalId",
                "name",
                "organization",
                "owner",
                "project",
                "query",
                "thresholdType",
                "timeWindow",
                "triggers"
            ],
            "inputProperties": {
                "aggregate": {
                    "type": "string",
                    "description": "The aggregation criteria to apply\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The Sentry Alert category\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform Alert rule in a specific environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The metric alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the metric alert belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Specifies the owner id of this Alert rule\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the metric alert for.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The query filter to apply\n"
                },
                "resolveThreshold": {
                    "type": "number",
                    "description": "The value at which the Alert rule resolves\n"
                },
                "thresholdType": {
                    "type": "integer",
                    "description": "The type of threshold\n"
                },
                "timeWindow": {
                    "type": "number",
                    "description": "The period to evaluate the Alert rule in minutes\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/MetricAlertTrigger:MetricAlertTrigger"
                    }
                }
            },
            "requiredInputs": [
                "aggregate",
                "organization",
                "project",
                "query",
                "thresholdType",
                "timeWindow",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetricAlert resources.\n",
                "properties": {
                    "aggregate": {
                        "type": "string",
                        "description": "The aggregation criteria to apply\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The Sentry Alert category\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform Alert rule in a specific environment\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this metric alert.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The metric alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the metric alert belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Specifies the owner id of this Alert rule\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the metric alert for.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query filter to apply\n"
                    },
                    "resolveThreshold": {
                        "type": "number",
                        "description": "The value at which the Alert rule resolves\n"
                    },
                    "thresholdType": {
                        "type": "integer",
                        "description": "The type of threshold\n"
                    },
                    "timeWindow": {
                        "type": "number",
                        "description": "The period to evaluate the Alert rule in minutes\n"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/MetricAlertTrigger:MetricAlertTrigger"
                        }
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/organization:Organization": {
            "properties": {
                "agreeTerms": {
                    "type": "boolean",
                    "description": "You agree to the applicable terms of service and privacy policy.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name for the organization.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The unique URL slug for this organization.\n"
                }
            },
            "required": [
                "agreeTerms",
                "internalId",
                "name",
                "slug"
            ],
            "inputProperties": {
                "agreeTerms": {
                    "type": "boolean",
                    "description": "You agree to the applicable terms of service and privacy policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name for the organization.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The unique URL slug for this organization.\n"
                }
            },
            "requiredInputs": [
                "agreeTerms"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "agreeTerms": {
                        "type": "boolean",
                        "description": "You agree to the applicable terms of service and privacy policy.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human readable name for the organization.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/plugin:Plugin": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Plugin config.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin ID.\n",
                    "language": {
                        "csharp": {
                            "name": "SentryPlugin"
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the plugin for.\n"
                }
            },
            "required": [
                "organization",
                "plugin",
                "project"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Plugin config.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin ID.\n",
                    "language": {
                        "csharp": {
                            "name": "SentryPlugin"
                        }
                    }
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the plugin for.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "plugin",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Plugin resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Plugin config.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "plugin": {
                        "type": "string",
                        "description": "Plugin ID.\n",
                        "language": {
                            "csharp": {
                                "name": "SentryPlugin"
                            }
                        }
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the plugin for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/project:Project": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "digestsMaxDelay": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                },
                "digestsMinDelay": {
                    "type": "integer",
                    "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this project.\n"
                },
                "isBookmarked": {
                    "type": "boolean",
                    "deprecationMessage": "is_bookmarked is no longer used"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The optional platform for this project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Use `internal_id` instead.\n",
                    "deprecationMessage": "Use `internal_id` instead."
                },
                "resolveAge": {
                    "type": "integer",
                    "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this project.\n"
                },
                "status": {
                    "type": "string"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to create the project for.\n"
                }
            },
            "required": [
                "color",
                "digestsMaxDelay",
                "digestsMinDelay",
                "features",
                "internalId",
                "isBookmarked",
                "isPublic",
                "name",
                "organization",
                "platform",
                "projectId",
                "resolveAge",
                "slug",
                "status",
                "team"
            ],
            "inputProperties": {
                "digestsMaxDelay": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                },
                "digestsMinDelay": {
                    "type": "integer",
                    "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The optional platform for this project.\n"
                },
                "resolveAge": {
                    "type": "integer",
                    "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this project.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to create the project for.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "team"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "digestsMaxDelay": {
                        "type": "integer",
                        "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                    },
                    "digestsMinDelay": {
                        "type": "integer",
                        "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this project.\n"
                    },
                    "isBookmarked": {
                        "type": "boolean",
                        "deprecationMessage": "is_bookmarked is no longer used"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the project.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The optional platform for this project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Use `internal_id` instead.\n",
                        "deprecationMessage": "Use `internal_id` instead."
                    },
                    "resolveAge": {
                        "type": "integer",
                        "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The optional slug for this project.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "team": {
                        "type": "string",
                        "description": "The slug of the team to create the project for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/rule:Rule": {
            "properties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of actions.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of conditions.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of filters.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this issue alert.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the issue alert belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the issue alert for.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use `project` (singular) instead.\n",
                    "deprecationMessage": "Use `project` (singular) instead."
                }
            },
            "required": [
                "actionMatch",
                "actions",
                "conditions",
                "environment",
                "filterMatch",
                "frequency",
                "internalId",
                "name",
                "organization",
                "project",
                "projects"
            ],
            "inputProperties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of actions.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of conditions.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "List of filters.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the issue alert belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the issue alert for.\n"
                }
            },
            "requiredInputs": [
                "actionMatch",
                "actions",
                "conditions",
                "filterMatch",
                "frequency",
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "actionMatch": {
                        "type": "string",
                        "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of actions.\n"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of conditions.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform issue alert in a specific environment.\n"
                    },
                    "filterMatch": {
                        "type": "string",
                        "description": "Trigger actions if `all`, `any`, or `none` of the specified filters match.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "List of filters.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "Perform actions at most once every `X` minutes for this issue. Defaults to `30`.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this issue alert.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The issue alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the issue alert belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the issue alert for.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Use `project` (singular) instead.\n",
                        "deprecationMessage": "Use `project` (singular) instead."
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/team:Team": {
            "properties": {
                "hasAccess": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this team.\n"
                },
                "isMember": {
                    "type": "boolean"
                },
                "isPending": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this team.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Use `internal_id` instead.\n",
                    "deprecationMessage": "Use `internal_id` instead."
                }
            },
            "required": [
                "hasAccess",
                "internalId",
                "isMember",
                "isPending",
                "name",
                "organization",
                "slug",
                "teamId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this team.\n"
                }
            },
            "requiredInputs": [
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "hasAccess": {
                        "type": "boolean"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this team.\n"
                    },
                    "isMember": {
                        "type": "boolean"
                    },
                    "isPending": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the team should be created for.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The optional slug for this team.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Use `internal_id` instead.\n",
                        "deprecationMessage": "Use `internal_id` instead."
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sentry:index/getDashboard:getDashboard": {
            "inputs": {
                "description": "A collection of arguments for invoking getDashboard.\n",
                "properties": {
                    "internalId": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDashboard.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getDashboardWidget:getDashboardWidget"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization",
                    "title",
                    "widgets",
                    "id"
                ]
            }
        },
        "sentry:index/getIssueAlert:getIssueAlert": {
            "inputs": {
                "description": "A collection of arguments for invoking getIssueAlert.\n",
                "properties": {
                    "internalId": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIssueAlert.\n",
                "properties": {
                    "actionMatch": {
                        "type": "string"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        }
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        }
                    },
                    "environment": {
                        "type": "string"
                    },
                    "filterMatch": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        }
                    },
                    "frequency": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "actionMatch",
                    "actions",
                    "conditions",
                    "environment",
                    "filterMatch",
                    "filters",
                    "frequency",
                    "internalId",
                    "name",
                    "organization",
                    "project",
                    "id"
                ]
            }
        },
        "sentry:index/getKey:getKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getKey.\n",
                "properties": {
                    "first": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "organization": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "project": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKey.\n",
                "properties": {
                    "dsnCsp": {
                        "type": "string"
                    },
                    "dsnPublic": {
                        "type": "string"
                    },
                    "dsnSecret": {
                        "type": "string",
                        "deprecationMessage": "DSN (Deprecated) for the key."
                    },
                    "first": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "integer"
                    },
                    "public": {
                        "type": "string"
                    },
                    "rateLimitCount": {
                        "type": "integer"
                    },
                    "rateLimitWindow": {
                        "type": "integer"
                    },
                    "secret": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dsnCsp",
                    "dsnPublic",
                    "dsnSecret",
                    "isActive",
                    "organization",
                    "project",
                    "projectId",
                    "public",
                    "rateLimitCount",
                    "rateLimitWindow",
                    "secret",
                    "id"
                ]
            }
        },
        "sentry:index/getMetricAlert:getMetricAlert": {
            "inputs": {
                "description": "A collection of arguments for invoking getMetricAlert.\n",
                "properties": {
                    "internalId": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetricAlert.\n",
                "properties": {
                    "aggregate": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "resolveThreshold": {
                        "type": "number"
                    },
                    "thresholdType": {
                        "type": "integer"
                    },
                    "timeWindow": {
                        "type": "number"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getMetricAlertTrigger:getMetricAlertTrigger"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aggregate",
                    "dataset",
                    "environment",
                    "internalId",
                    "name",
                    "organization",
                    "owner",
                    "project",
                    "query",
                    "resolveThreshold",
                    "thresholdType",
                    "timeWindow",
                    "triggers",
                    "id"
                ]
            }
        },
        "sentry:index/getOrganization:getOrganization": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "sentry:index/getTeam:getTeam": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "organization": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "hasAccess": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string"
                    },
                    "isMember": {
                        "type": "boolean"
                    },
                    "isPending": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hasAccess",
                    "internalId",
                    "isMember",
                    "isPending",
                    "name",
                    "organization",
                    "slug",
                    "id"
                ]
            }
        }
    }
}